version: '3'
services:
  db: &db
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - ./postgres14:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
    expose:
      - 5432
    deploy:
      placement:
        constraints: [node.hostname == okaya-srv-0]

  db_backup:
    <<: *db
    command: sh -c "pg_basebackup -F t -D /backups/`date +%Y%m%d` -z -h db -U postgres -P && chown 1000:1000 -R /backups/*"
    healthcheck:
      test: ""
    volumes:
      - ./postgres_backups:/backups
      - /usr/share/zoneinfo/Asia/Tokyo:/etc/localtime
    deploy:
      placement:
        constraints: [node.hostname == okaya-srv-0]
      replicas: 0
      restart_policy:
        condition: none

  redis:
    restart: always
    image: redis:7-alpine
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - ./redis:/data
    deploy:
      placement:
        constraints: [node.hostname == okaya-srv-0]

  es:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
      - "xpack.license.self_generated.type=basic"
      - "xpack.security.enabled=false"
      - "xpack.watcher.enabled=false"
      - "xpack.graph.enabled=false"
      - "xpack.ml.enabled=false"
      - "bootstrap.memory_lock=true"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "thread_pool.write.queue_size=1000"
    networks:
       - external_network
       - internal_network
    healthcheck:
       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
       - ./elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      placement:
        constraints: [node.hostname == okaya-srv-0]

  web: &web
    build: .
    image: ghcr.io/mastodon/mastodon:v4.2.0
    restart: always
    env_file: .env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    networks:
      - external_network
      - internal_network
      - nginx_proxy_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    ports:
      - '127.0.0.1:3000:3000'
    depends_on:
      - db
      - redis
      - es
    volumes:
      - public-system:/mastodon/public/system
    environment:
      - LETSENCRYPT_HOST=ma.fono.jp
      - LETSENCRYPT_EMAIL=fono@fono.jp
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: vip
  
  before_migration:
    <<: *web
    command: bash -c "bundle exec rails db:migrate"
    healthcheck:
      test: ""
    ports: []
    environment:
      - SKIP_POST_DEPLOYMENT_MIGRATIONS=true
    deploy:
      placement:
        constraints: [node.hostname == okaya-srv-0]
      replicas: 0
      restart_policy:
        condition: none

  after_migration:
    <<: *web
    command: bash -c "bundle exec rails db:migrate"
    healthcheck:
      test: ""
    ports: []
    deploy:
      placement:
        constraints: [node.hostname == okaya-srv-0]
      replicas: 0
      restart_policy:
        condition: none

  es_index:
    <<: *web
    command: bash -c "bin/tootctl search deploy --reset-chewy --concurrency=8"
    healthcheck:
      test: ""
    ports: []
    deploy:
      placement:
        constraints: [node.hostname == okaya-srv-0]
      replicas: 0
      restart_policy:
        condition: none


  streaming:
    build: .
    image: ghcr.io/mastodon/mastodon:v4.2.0
    restart: always
    env_file: .env.production
    command: node ./streaming
    networks:
      - external_network
      - nginx_proxy_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    # ports:
    #   - '4000:4000'
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: vip

  sidekiq:
    build: .
    image: ghcr.io/mastodon/mastodon:v4.2.0
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - public-system:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: vip

  ## Uncomment to enable federation with tor instances along with adding the following ENV variables
  ## http_proxy=http://privoxy:8118
  ## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
  # tor:
  #   image: sirboops/tor
  #   networks:
  #      - external_network
  #      - internal_network
  #
  # privoxy:
  #   image: sirboops/privoxy
  #   volumes:
  #     - ./priv-config:/opt/config
  #   networks:
  #     - external_network
  #     - internal_network

volumes:
  public-system:
    driver_opts:
      type: "nfs"
      o: "addr=192.168.100.101,rw"
      device: ":/home/fono/ghq/github.com/tootsuite/mastodon/public/system"

networks:
  external_network:
    name: mastodon_external
    external: true
  internal_network:
    name: mastodon_internal
    external: true
  nginx_proxy_network:
    name: nginx-proxy-okaya
    external: true
