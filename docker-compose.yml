# This file is designed for production server deployment, not local development work
# For a containerized local dev environment, see: https://github.com/mastodon/mastodon/blob/main/README.md#docker

services:
  db: &db
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      start_period: 3m
    volumes:
      - ./postgres14:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
    expose:
      - 5432
    deploy:
      placement:
        constraints: [node.hostname == okaya]

  db_backup:
    <<: *db
    command: sh -c "pg_basebackup -F t -D /backups/`date +%Y%m%d` -z -h db -U postgres -P && chown 1000:1000 -R /backups/*"
    networks:
      - internal_network
    volumes:
      - ./postgres_backups:/backups
      - /usr/share/zoneinfo/Asia/Tokyo:/etc/localtime
    deploy:
      placement:
        constraints: [node.hostname == okaya]
      replicas: 0
      restart_policy:
        condition: none

  redis:
    restart: always
    image: redis:7-alpine
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - ./redis:/data
    deploy:
      placement:
        constraints: [node.hostname == okaya]

  es:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    environment:
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true'
      - 'xpack.license.self_generated.type=basic'
      - 'xpack.security.enabled=false'
      - 'xpack.watcher.enabled=false'
      - 'xpack.graph.enabled=false'
      - 'xpack.ml.enabled=false'
      - 'bootstrap.memory_lock=true'
      - 'cluster.name=es-mastodon'
      - 'discovery.type=single-node'
      - 'thread_pool.write.queue_size=1000'
    networks:
      - external_network
      - internal_network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl --silent --fail localhost:9200/_cluster/health || exit 1',
        ]
    volumes:
      - ./elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      placement:
        constraints: [node.hostname == okaya]

  web: &web
    # You can uncomment the following line if you want to not use the prebuilt image, for example if you have local code changes
    # build: .
    image: ghcr.io/mastodon/mastodon:v4.3.1
    restart: always
    env_file: .env.production
    command: bundle exec puma -C config/puma.rb
    networks:
      - external_network
      - internal_network
      - nginx_proxy_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL',"curl -s --noproxy localhost localhost:3000/health | grep -q 'OK' || exit 1"]
    ports:
      - '127.0.0.1:3000:3000'
    depends_on:
      - db
      - redis
      - es
    deploy:
      mode: replicated
      replicas: 4
      endpoint_mode: vip
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      labels:
        traefik.enable: 'true'
        traefik.docker.network: nginx-proxy-okaya
        traefik.http.middlewares.mastodon-web-hsts.headers.forceSTSHeader: 'true'
        traefik.http.middlewares.mastodon-web-hsts.headers.stsIncludeSubdomains: 'false'
        traefik.http.middlewares.mastodon-web-hsts.headers.stsPreload: 'true'
        traefik.http.middlewares.mastodon-web-hsts.headers.stsSeconds: 31536000
        traefik.http.middlewares.mastodon-web-redirect.redirectscheme.scheme: 'https'
        traefik.http.middlewares.mastodon-web-redirect.redirectscheme.port: 443
        traefik.http.middlewares.mastodon-web-redirect.redirectscheme.permanent: 'true'
        traefik.http.routers.mastodon-web.rule: 'Host(`ma.fono.jp`)'
        traefik.http.routers.mastodon-web.tls: 'true'
        traefik.http.routers.mastodon-web.tls.certresolver: zerossl
        traefik.http.routers.mastodon-web.entrypoints: websecure
        traefik.http.routers.mastodon-web.middlewares: 'mastodon-web-hsts'
        traefik.http.services.mastodon-web-service.loadbalancer.server.port: 3000
        traefik.http.routers.mastodon-web-http.rule: 'Host(`ma.fono.jp`)'
        traefik.http.routers.mastodon-web-http.entrypoints: web
        traefik.http.routers.mastodon-web-http.middlewares: mastodon-web-redirect
  before_migration:
    <<: *web
    command: bash -c "bundle exec rails db:migrate"
    healthcheck:
      test: ''
    ports: []
    environment:
      - SKIP_POST_DEPLOYMENT_MIGRATIONS=true
    deploy:
      placement:
        constraints: [node.hostname == okaya]
      replicas: 0
      restart_policy:
        condition: none

  maintainance:
    <<: *web
    command: bash -c "bin/tootctl accounts prune && bin/tootctl media remove && bin/tootctl media remove-orphans && bin/tootctl preview_cards remove --days=21 && bin/tootctl media usage"
    healthcheck:
      test: ''
    ports: []
    deploy:
      placement:
        constraints: [node.hostname == okaya]
      replicas: 0
      restart_policy:
        condition: none

  after_migration:
    <<: *web
    command: bash -c "bundle exec rails db:migrate"
    healthcheck:
      test: ''
    ports: []
    deploy:
      placement:
        constraints: [node.hostname == okaya]
      replicas: 0
      restart_policy:
        condition: none

  es_index:
    <<: *web
    command: bash -c "bin/tootctl search deploy --reset-chewy --concurrency=8"
    healthcheck:
      test: ''
    ports: []
    deploy:
      placement:
        constraints: [node.hostname == okaya]
      replicas: 0
      restart_policy:
        condition: none

  streaming:
    # You can uncomment the following lines if you want to not use the prebuilt image, for example if you have local code changes
    # build:
    #   dockerfile: ./streaming/Dockerfile
    #   context: .
    image: ghcr.io/mastodon/mastodon-streaming:v4.3.1
    restart: always
    env_file: .env.production
    command: node ./streaming/index.js
    networks:
      - external_network
      - nginx_proxy_network
      - internal_network
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', "curl -s --noproxy localhost localhost:4000/api/v1/streaming/health | grep -q 'OK' || exit 1"]
    ports:
      - '127.0.0.1:4000:4000'
    depends_on:
      - db
      - redis
    deploy:
      mode: replicated
      replicas: 4
      endpoint_mode: vip
      labels:
        traefik.enable: 'true'
        traefik.docker.network: nginx-proxy-okaya
        traefik.http.routers.mastodon-streaming.rule: 'Host(`ma.fono.jp`) && PathPrefix(`/api/v1/streaming`)'
        traefik.http.routers.mastodon-streaming.tls: 'true'
        traefik.http.routers.mastodon-streaming.tls.certresolver: zerossl
        traefik.http.routers.mastodon-streaming.entrypoints: websecure
        traefik.http.services.mastodon-streaming-service.loadbalancer.server.port: 4000

  sidekiq:
    build: .
    image: ghcr.io/mastodon/mastodon:v4.3.1
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    deploy:
      mode: replicated
      replicas: 4
      endpoint_mode: vip

  ## Uncomment to enable federation with tor instances along with adding the following ENV variables
  ## http_hidden_proxy=http://privoxy:8118
  ## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
  # tor:
  #   image: sirboops/tor
  #   networks:
  #      - external_network
  #      - internal_network
  #
  # privoxy:
  #   image: sirboops/privoxy
  #   volumes:
  #     - ./priv-config:/opt/config
  #   networks:
  #     - external_network
  #     - internal_network

networks:
  external_network:
    name: mastodon_external
    external: true
  internal_network:
    name: mastodon_internal
    external: true
  nginx_proxy_network:
    name: nginx-proxy-okaya
    external: true
